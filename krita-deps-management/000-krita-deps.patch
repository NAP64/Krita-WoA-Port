diff --git a/ext_boost/CMakeLists.txt b/ext_boost/CMakeLists.txt
index 10ba997..4f01c03 100644
--- a/ext_boost/CMakeLists.txt
+++ b/ext_boost/CMakeLists.txt
@@ -13,20 +13,20 @@ if(WIN32)
         string(REGEX REPLACE "([0-9])\\.([0-9])(\\.[0-9])?" "\\1"
             KRITA_boost_COMPILER_VERSION ${CMAKE_CXX_COMPILER_VERSION})
 
-        set (BUILD_ARGS -j${SUBMAKE_JOBS} linkflags="${SECURITY_SHARED_LINKER_FLAGS}" --with-system --build-dir=build-dir toolset=gcc variant=release link=shared threading=multi architecture=x86 address-model=64)
+        set (BUILD_ARGS -j${SUBMAKE_JOBS} linkflags="${SECURITY_SHARED_LINKER_FLAGS}" --with-system --with-test --debug --build-dir=build-dir toolset=gcc variant=release link=shared threading=multi architecture=arm address-model=64)
 
         ExternalProject_Add(
             ext_boost
 
             DOWNLOAD_DIR ${EXTERNALS_DOWNLOAD_DIR}
 
-            URL https://archives.boost.io/release/1.80.0/source/boost_1_80_0.tar.bz2
-            URL_HASH SHA256=1e19565d82e43bc59209a168f5ac899d3ba471d55c7610c677d4ccf2c9c500c0
+            URL https://archives.boost.io/release/1.87.0/source/boost_1_87_0.tar.bz2
+            # URL_HASH SHA256=1e19565d82e43bc59209a168f5ac899d3ba471d55c7610c677d4ccf2c9c500c0
 
-            PATCH_COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0001-Fix-Krita-builds-with-Clang.patch
-                  COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0001-Fix-building-Boost.Build-with-a-chosen-toolset.patch
-                  COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0001-Fix-compilation-with-clang-15.patch
-                  COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0001-mpl-Use-static-const-for-next-prior-from-C-11.patch
+            # PATCH_COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0001-Fix-Krita-builds-with-Clang.patch
+            #       COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0001-Fix-building-Boost.Build-with-a-chosen-toolset.patch
+            #       COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0001-Fix-compilation-with-clang-15.patch
+            #       COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0001-mpl-Use-static-const-for-next-prior-from-C-11.patch
 
             CONFIGURE_COMMAND <SOURCE_DIR>/bootstrap.bat gcc --prefix=${EXTPREFIX}
             BUILD_COMMAND ${CMAKE_COMMAND} -DPREFIX=${EXTPREFIX} -P ${CMAKE_CURRENT_SOURCE_DIR}/run-b2-with-destdir.cmake -- ${BUILD_ARGS}
@@ -38,7 +38,7 @@ if(WIN32)
         ExternalProject_Add_Step(
             ext_boost
             pre_install
-            COMMAND ${CMAKE_COMMAND} -DSRC=<SOURCE_DIR>/build-dir/boost/bin.v2/libs/system/build/gcc-${KRITA_boost_COMPILER_VERSION}/release/threading-multi/visibility-hidden/libboost_system-mgw${KRITA_boost_COMPILER_VERSION}-mt-x64-1_80.dll -DDST=${EXTPREFIX}/bin -P ${KRITA_CI_INSTALL}
+            COMMAND ${CMAKE_COMMAND} -DSRC=<SOURCE_DIR>/build-dir/boost/bin.v2/libs/system/build/gcc-${KRITA_boost_COMPILER_VERSION}/release/arm_64/threadapi-win32/threading-multi/visibility-hidden/libboost_system-mgw${KRITA_boost_COMPILER_VERSION}-mt-a64-1_87.dll -DDST=${EXTPREFIX}/bin -P ${KRITA_CI_INSTALL}
             DEPENDERS install
         )
         if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
@@ -73,8 +73,8 @@ if(WIN32)
             ext_boost
             DOWNLOAD_DIR ${EXTERNALS_DOWNLOAD_DIR}
 
-            URL https://archives.boost.io/release/1.80.0/source/boost_1_80_0.tar.bz2
-            URL_HASH SHA256=1e19565d82e43bc59209a168f5ac899d3ba471d55c7610c677d4ccf2c9c500c0
+            URL https://archives.boost.io/release/1.87.0/source/boost_1_87_0.tar.bz2
+            # URL_HASH SHA256=1e19565d82e43bc59209a168f5ac899d3ba471d55c7610c677d4ccf2c9c500c0
 
             CONFIGURE_COMMAND <SOURCE_DIR>/bootstrap.bat msvc --prefix=${EXTPREFIX}
             BUILD_COMMAND ${CMAKE_COMMAND} -DPREFIX=${EXTPREFIX} -P ${CMAKE_CURRENT_SOURCE_DIR}/run-b2-with-destdir.cmake -- ${BUILD_ARGS}
@@ -134,8 +134,8 @@ else()
     endif()
     ExternalProject_Add( ext_boost
         DOWNLOAD_DIR ${EXTERNALS_DOWNLOAD_DIR}
-        URL https://archives.boost.io/release/1.80.0/source/boost_1_80_0.tar.bz2
-        URL_HASH SHA256=1e19565d82e43bc59209a168f5ac899d3ba471d55c7610c677d4ccf2c9c500c0
+        URL https://archives.boost.io/release/1.87.0/source/boost_1_87_0.tar.bz2
+        # URL_HASH SHA256=1e19565d82e43bc59209a168f5ac899d3ba471d55c7610c677d4ccf2c9c500c0
 
         PATCH_COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0001-Fix-compilation-with-clang-15.patch
               COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0001-mpl-Use-static-const-for-next-prior-from-C-11.patch
diff --git a/ext_brotli/CMakeLists.txt b/ext_brotli/CMakeLists.txt
index 64dbe95..7f7af60 100644
--- a/ext_brotli/CMakeLists.txt
+++ b/ext_brotli/CMakeLists.txt
@@ -13,7 +13,7 @@ if (MINGW)
     check_cxx_compiler_flag("-mavx512f" CAN_TARGET_AVX512F)
     if (NOT CAN_BUILD_HIGHWAY OR NOT CAN_TARGET_AVX512F)
         message(WARNING "Skipping libjxl, compiler cannot build highway.")
-        return()
+        #return()
     endif()
 endif()
 
diff --git a/ext_freetype/CMakeLists.txt b/ext_freetype/CMakeLists.txt
index e0504de..50857c1 100644
--- a/ext_freetype/CMakeLists.txt
+++ b/ext_freetype/CMakeLists.txt
@@ -58,7 +58,7 @@ kis_ExternalProject_Add_with_separate_builds_apple(
     CONFIGURE_ARGS --prefix=${BOOTSTRAP_PREFIX}
         -Dglib=disabled
         -Dgobject=disabled
-        -Dtests=disabled
+        -Dtests=enabled
         -Dfreetype=enabled
         -Dpkgconfig.relocatable=true
         --pkg-config-path ${_mesonified_pkg_config_path}
@@ -84,6 +84,7 @@ ExternalProject_Add( ext_freetype
         -DFT_REQUIRE_HARFBUZZ=ON
         -DFT_REQUIRE_PNG=ON
         -DBUILD_SHARED_LIBS=TRUE
+        -DBUILD_TESTING=ON
         -DCMAKE_PREFIX_PATH=${EXTPREFIX}
         ${GLOBAL_PROFILE}
 
diff --git a/ext_png/CMakeLists.txt b/ext_png/CMakeLists.txt
index 11da76c..7f437fc 100644
--- a/ext_png/CMakeLists.txt
+++ b/ext_png/CMakeLists.txt
@@ -12,7 +12,9 @@ kis_ExternalProject_Add_with_separate_builds_apple(
     URL https://downloads.sourceforge.net/project/libpng/libpng16/1.6.38/libpng-1.6.38.tar.xz
     URL_HASH SHA256=b3683e8b8111ebf6f1ac004ebb6b0c975cd310ec469d98364388e9cedbfa68be
 
-    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${EXTPREFIX} -DCMAKE_BUILD_TYPE=${GLOBAL_BUILD_TYPE} ${GLOBAL_PROFILE} -DPNG_TESTS=OFF
+    PATCH_COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0001-winarm-fix-case-sensitive.patch
+
+    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${EXTPREFIX} -DCMAKE_BUILD_TYPE=${GLOBAL_BUILD_TYPE} ${GLOBAL_PROFILE} -DPNG_TESTS=ON
 
     UPDATE_COMMAND ""
 )
diff --git a/ext_libaom/CMakeLists.txt b/ext_libaom/CMakeLists.txt
index a9619f8..0e6312d 100644
--- a/ext_libaom/CMakeLists.txt
+++ b/ext_libaom/CMakeLists.txt
@@ -27,6 +27,7 @@ kis_ExternalProject_Add_with_separate_builds_apple(
 
     PATCH_COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0001-cdef-Disable-MSVC-optimizations-for-filter_block.patch
           COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/android-cpu-features.patch
+          COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0000-non-MSVC-Windows-ARM-build.patch
 
     # Static library is needed because ffmpeg accesses aom_codec_av1_dx_algo
     # which is not exported in Windows compilers.
diff --git a/ext_vpx/CMakeLists.txt b/ext_vpx/CMakeLists.txt
index 47764de..3011a4f 100644
--- a/ext_vpx/CMakeLists.txt
+++ b/ext_vpx/CMakeLists.txt
@@ -32,6 +32,7 @@ kis_ExternalProject_Add_with_separate_builds_apple(
     # I guess it is related to the MSVC support. Since we use clang for
     # our builds, it should be fine just to ignore this check
     PATCH_COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0001-Allow-shared-libraries-everywhere.patch
+          COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0000-windows-python-workaround.patch
 
     CONFIGURE_ARGS --prefix=${EXTPREFIX}
             -Ddefault_library=shared
diff --git a/ext_poppler/CMakeLists.txt b/ext_poppler/CMakeLists.txt
index 22d6d84..ad67b64 100644
--- a/ext_poppler/CMakeLists.txt
+++ b/ext_poppler/CMakeLists.txt
@@ -13,6 +13,7 @@ ExternalProject_Add( ext_poppler
 
     PATCH_COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0001-fix_sed_invocation.patch
             COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0001-macos-add-missing-system-header.patch
+            COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0000-clang-basic_string.patch
 
 	INSTALL_DIR ${EXTPREFIX}
 	CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${EXTPREFIX} -DCMAKE_BUILD_TYPE=${GLOBAL_BUILD_TYPE} ${GLOBAL_PROFILE} -DBUILD_GTK_TESTS=OFF -DBUILD_QT5_TESTS=FALSE -DBUILD_CPP_TESTS=FALSE  -DENABLE_UTILS=FALSE -DENABLE_GLIB=FALSE -DENABLE_LIBOPENJPEG=none -DWITH_NSS3=OFF -DBUILD_MANUAL_TESTS=OFF
diff --git a/latest/krita-deps.yml b/latest/krita-deps.yml
index 705e9e3..1c0a3c2 100644
--- a/latest/krita-deps.yml
+++ b/latest/krita-deps.yml
@@ -3,6 +3,6 @@
     "base/boost": "master"
     "base/lcms2": "master"
     "base/png": "master"
-    "base/nasm": "master"
+    # "base/nasm": "master"
     "base/eigen3": "master"
     "base/expat": "master"
@@ -30,9 +30,9 @@
     "base/zug": "master"
     "base/immer": "master"
     "base/lager": "master"
-    "base/highway": "master"
+    # "base/highway": "master"
     "base/brotli": "master"
-    "base/jpegxl": "master"
+    #"base/jpegxl": "master"
     "base/extra_cmake_modules": "master"
     "base/kconfig": "master"
     "base/karchive": "master"
@@ -58,7 +58,7 @@
     "ffmpeg/libtheora": "master"
     "ffmpeg/openh264": "master"
     "ffmpeg/lame": "master"
-    "ffmpeg/ffmpeg": "master"
+    #"ffmpeg/ffmpeg": "master"
     "base/mlt": "master"
 
 # libiconv cannot be cross-compiled for Android as of now. It uses
@@ -129,11 +129,11 @@
 - 'on': ['Windows']
   'require':
     "base/patch": "master"
-    "base/strawberryperl": "master"
+    # "base/strawberryperl": "master"
     "base/zlib": "master"
     "base/googleangle": "master"
     "base/drmingw": "master"
-    "base/icoutils": "master"
+    # "base/icoutils": "master"
     "base/dlfcn_win32": "master"
 
 - 'on': ['Windows', 'MacOS']
@@ -146,7 +146,7 @@
     # TODO: check if we actually need that on macOS (required by ki18n)
     "base/gettext": "master"
     # TODO: check if we actually need that on macOS (required by Qt and python)
-    "base/openssl": "master"
+    #"base/openssl": "master"
 
 - 'on': ['Linux', 'MacOS']
   'require':
diff --git a/ext_png/0001-winarm-fix-case-sensitive.patch b/ext_png/0001-winarm-fix-case-sensitive.patch
new file mode 100644
index 0000000..892c6d3
--- /dev/null
+++ b/ext_png/0001-winarm-fix-case-sensitive.patch
@@ -0,0 +1,20 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index deadbeef..00000000 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -90,9 +91,13 @@ if(PNG_HARDWARE_OPTIMIZATIONS)
+ 
+ # Set definitions and sources for ARM.
+ if(TARGET_ARCH MATCHES "^arm" OR
+-   TARGET_ARCH MATCHES "^aarch64")
++   TARGET_ARCH MATCHES "^aarch64" OR
++   TARGET_ARCH MATCHES "^ARM" OR
++   TARGET_ARCH MATCHES "^AARCH64")
+   if(TARGET_ARCH MATCHES "^arm64" OR
+-     TARGET_ARCH MATCHES "^aarch64")
++     TARGET_ARCH MATCHES "^aarch64" OR
++     TARGET_ARCH MATCHES "^ARM64" OR
++     TARGET_ARCH MATCHES "^AARCH64")
+     set(PNG_ARM_NEON_POSSIBLE_VALUES on off)
+     set(PNG_ARM_NEON "on"
+         CACHE STRING "Enable ARM NEON optimizations: on|off; on is default")
\ No newline at end of file
diff --git a/ext_vpx/0000-windows-python-workaround.patch b/ext_vpx/0000-windows-python-workaround.patch
new file mode 100644
index 0000000..deadbeef
--- /dev/null
+++ b/ext_vpx/0000-windows-python-workaround.patch
@@ -0,0 +1,52 @@
+diff --git a/meson.build b/meson.build
+index 3a023f00b..1f1e53c86 100644
+--- a/meson.build
++++ b/meson.build
+@@ -1672,14 +1672,14 @@ if asm_conversion_exe.found()
+ 	stdinout_wrapper_exe = find_program('meson/stdinout_wrapper.py', required: true)
+ 	asm_transformer = generator(
+ 		stdinout_wrapper_exe,
+-		arguments: ['--input', '@INPUT@', '--output', '@OUTPUT@', asm_conversion_exe.full_path()] + asm_conversion_cmd,
++		arguments: ['--input', '@INPUT@', '--output', '@OUTPUT@', 'python', asm_conversion_exe.full_path()] + asm_conversion_cmd,
+ 		output: '@0@@1@'.format('@BASENAME@', as_sfx)
+ 	)
+ endif
+ 
+ if features.get('x86', false) or features.get('x86_64', false)
+ 	config_asm = configure_file(
+-		command: [config_asm_generator, '@INPUT@', '@OUTPUT@', '--format=yasm'],
++		command: ['python', config_asm_generator, '@INPUT@', '@OUTPUT@', '--format=yasm'],
+ 		input: vpx_config_h,
+ 		output: 'vpx_config.asm',
+ 	)
+@@ -1696,19 +1696,19 @@ if features.get('x86', false) or features.get('x86_64', false)
+ 	)
+ elif asm_conversion_exe.found()
+ 	ads_config_asm = configure_file(
+-		command: [config_asm_generator, '@INPUT@', '@OUTPUT@'],
++		command: ['python', config_asm_generator, '@INPUT@', '@OUTPUT@'],
+ 		input: vpx_config_h,
+ 		output: 'vpx_config.adstmp',
+ 	)
+ 	config_asm = configure_file(
+-		command: [stdinout_wrapper_exe, '--input', '@INPUT@', '--output', '@OUTPUT@', asm_conversion_exe.full_path()] + asm_conversion_cmd,
++		command: [stdinout_wrapper_exe, '--input', '@INPUT@', '--output', '@OUTPUT@', 'python', asm_conversion_exe.full_path()] + asm_conversion_cmd,
+ 		input: ads_config_asm,
+ 		output: 'vpx_config.asm',
+ 	)
+ 	asm_compiler = disabler()
+ else
+ 	config_asm = configure_file(
+-		command: [config_asm_generator, '@INPUT@', '@OUTPUT@'],
++		command: ['python', config_asm_generator, '@INPUT@', '@OUTPUT@'],
+ 		input: vpx_config_h,
+ 		output: 'vpx_config.asm',
+ 	)
+@@ -1781,6 +1781,7 @@ endforeach
+ gen_def_exe = find_program('meson/gen_def.py', required: true)
+ 
+ gen_def_cmd = [
++	'python',
+ 	gen_def_exe,
+ 	'--name=vpx',
+ 	'--out=@OUTPUT@'
\ No newline at end of file
diff --git a/ext_poppler/0000-clang-basic_string.patch b/ext_poppler/0000-clang-basic_string.patch
new file mode 100644
index 0000000..deadbeef
--- /dev/null
+++ b/ext_poppler/0000-clang-basic_string.patch
@@ -0,0 +1,13 @@
+diff --git a/cpp/poppler-global.h b/cpp/poppler-global.h
+index 7d3c890..26a2d00 100644
+--- a/cpp/poppler-global.h
++++ b/cpp/poppler-global.h
+@@ -96,7 +96,7 @@ typedef unsigned int /* time_t */ time_type;
+ #    pragma warning(push)
+ #    pragma warning(disable : 4251) /* class 'A' needs to have dll interface for to be used by clients of class 'B'. */
+ #endif
+-class POPPLER_CPP_EXPORT ustring : public std::basic_string<unsigned short>
++class POPPLER_CPP_EXPORT ustring : public std::basic_string<char16_t>
+ {
+ public:
+     ustring();
\ No newline at end of file
diff --git a/ext_libaom/0000-non-MSVC-Windows-ARM-build.patch b/ext_libaom/0000-non-MSVC-Windows-ARM-build.patch
new file mode 100644
index 0000000..deadbeef
--- /dev/null
+++ b/ext_libaom/0000-non-MSVC-Windows-ARM-build.patch
@@ -0,0 +1,33 @@
+diff --git a/aom_ports/arm_cpudetect.c b/aom_ports/arm_cpudetect.c
+index 305b22c..775c45d 100644
+--- a/aom_ports/arm_cpudetect.c
++++ b/aom_ports/arm_cpudetect.c
+@@ -56,7 +56,7 @@ int aom_arm_cpu_caps(void) {
+   return flags & mask;
+ }
+
+-#elif defined(_MSC_VER) /* end !CONFIG_RUNTIME_CPU_DETECT || __APPLE__ */
++#elif defined(_MSC_VER) || defined(_WIN32) /* end !CONFIG_RUNTIME_CPU_DETECT || __APPLE__ */
+ /*For GetExceptionCode() and EXCEPTION_ILLEGAL_INSTRUCTION.*/
+ #undef WIN32_LEAN_AND_MEAN
+ #define WIN32_LEAN_AND_MEAN
+@@ -77,13 +77,13 @@ int aom_arm_cpu_caps(void) {
+  */
+ #if HAVE_NEON
+   if (mask & HAS_NEON) {
+-    __try {
+-      /*VORR q0,q0,q0*/
+-      __emit(0xF2200150);
++    //__try {
++    //  /*VORR q0,q0,q0*/
++    //  __emit(0xF2200150);
+       flags |= HAS_NEON;
+-    } __except (GetExceptionCode() == EXCEPTION_ILLEGAL_INSTRUCTION) {
+-      /*Ignore exception.*/
+-    }
++    //} __except (GetExceptionCode() == EXCEPTION_ILLEGAL_INSTRUCTION) {
++    //  /*Ignore exception.*/
++    //}
+   }
+ #endif /* HAVE_NEON */
+   return flags & mask;
\ No newline at end of file
diff --git a/ext_python/CMakeLists.txt b/ext_python/CMakeLists.txt
index b732b94..abfb445 100644
--- a/ext_python/CMakeLists.txt
+++ b/ext_python/CMakeLists.txt
@@ -112,6 +112,8 @@ if (UNIX)
 
     endif()
 elseif(WIN32)
+    set(Python_FIND_STRATEGY LOCATION)
+    find_package(Python 3.10 COMPONENTS Development Interpreter)
     ExternalProject_Add( ext_python
         DOWNLOAD_DIR ${EXTERNALS_DOWNLOAD_DIR}
         URL https://www.python.org/ftp/python/3.10.7/python-3.10.7-embed-amd64.zip
@@ -120,11 +122,11 @@ elseif(WIN32)
         CONFIGURE_COMMAND ""
         BUILD_COMMAND ""
         INSTALL_COMMAND ${CMAKE_COMMAND} -E echo deploying python3 64-bit binary
-                COMMAND ${CMAKE_COMMAND} -DSRC=<SOURCE_DIR>/ -DDST=${EXTPREFIX}/python -P ${KRITA_CI_INSTALL_DIRECTORY}
-                COMMAND ${CMAKE_COMMAND} -DSRC=<SOURCE_DIR>/python3.dll -DDST=${EXTPREFIX}/bin -P  ${KRITA_CI_INSTALL}
-                COMMAND ${CMAKE_COMMAND} -DSRC=<SOURCE_DIR>/python310.dll -DDST=${EXTPREFIX}/bin -P  ${KRITA_CI_INSTALL}
-                COMMAND ${CMAKE_COMMAND} -DSRC=<SOURCE_DIR>/vcruntime140.dll -DDST=${EXTPREFIX}/bin -P  ${KRITA_CI_INSTALL}
-                COMMAND ${CMAKE_COMMAND} -DSRC=<SOURCE_DIR>/vcruntime140_1.dll -DDST=${EXTPREFIX}/bin -P  ${KRITA_CI_INSTALL}
+                COMMAND ${CMAKE_COMMAND} -DSRC=${Python_INCLUDE_DIRS}/../ -DDST=${EXTPREFIX}/python -P ${KRITA_CI_INSTALL_DIRECTORY}
+                COMMAND ${CMAKE_COMMAND} -DSRC=${Python_INCLUDE_DIRS}/../python3.dll -DDST=${EXTPREFIX}/bin -P  ${KRITA_CI_INSTALL}
+                COMMAND ${CMAKE_COMMAND} -DSRC=${Python_INCLUDE_DIRS}/../python310.dll -DDST=${EXTPREFIX}/bin -P  ${KRITA_CI_INSTALL}
+                COMMAND ${CMAKE_COMMAND} -DSRC=${Python_INCLUDE_DIRS}/../vcruntime140.dll -DDST=${EXTPREFIX}/bin -P  ${KRITA_CI_INSTALL}
+                COMMAND ${CMAKE_COMMAND} -DSRC=${Python_INCLUDE_DIRS}/../vcruntime140_1.dll -DDST=${EXTPREFIX}/bin -P  ${KRITA_CI_INSTALL}
                 COMMAND ${CMAKE_COMMAND} -DSRC=${CMAKE_CURRENT_SOURCE_DIR}/sitecustomize.py -DDST=${EXTPREFIX}/lib/site-packages/ -P  ${KRITA_CI_INSTALL}
                 # we install _distutils_system_mod.py on Windows only!
                 COMMAND ${CMAKE_COMMAND} -DSRC=${CMAKE_CURRENT_SOURCE_DIR}/_distutils_system_mod.py -DDST=${EXTPREFIX}/lib/site-packages/ -P  ${KRITA_CI_INSTALL}
